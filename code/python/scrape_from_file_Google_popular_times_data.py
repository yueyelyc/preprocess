import json
from bs4 import BeautifulSoup
import re
from collections import defaultdict, OrderedDict, Counter
import urllib

def get_url(keyword):
    template = 'https://www.google.com/search?client=ubuntu&channel=fs&q={}&ie=utf-8&oe=utf-8'
    # url = template.format(urllib.parse.quote(keyword))    #python3
    url = template.format(urllib.pathname2url(keyword))
    return (url)

def get_popular_times_from_html(html):
    """
    Params:
        html: a html source file
    """
    histograms = defaultdict(list)
    soup = BeautifulSoup(html, 'lxml')

    ##check if the sidebar exists
    if not soup.find_all('div', {'class': 'xpdopen'}):
        return None
    sidebar_soup = soup.find_all('div', {'class': 'xpdopen'})[0]

    ##check if "Popular times" exists
    if not sidebar_soup.find(text="Popular times"):
        return None

    ##We should have the histograms now
    histograms_soup = sidebar_soup.find_all('div', {'aria-label': re.compile('Histogram showing popular times on .')})

    for ss in histograms_soup:
        match = re.match('.+ ([A-Za-z]+)$', ss["aria-label"])
        ##Make sure that Mondays, Tuesdays, etc. are present
        if not (match):
            return None
        day = match.group(1)
        """
        Extract the bar heights and bar times blocks.
        They are probably preceeded by a SPAN element.
        """
        for tmp in ss.children:
            if tmp.name == 'span':
                siblings = tmp.fetchNextSiblings()
                bar_heights = siblings[0]
                bar_times = siblings[1]
        ##Now extract the bar height and bar time values
        bar_heights = list(bar_heights.children)
        bar_times = list(bar_times.children)
        ##make sure the number of bars matches the number of times
        if (len(bar_heights) != len(bar_times)):
            return None
        for bb_soup, tt_soup in zip(bar_heights, bar_times):
            bar_height = 0
            """
            A typical line for bar heights:
                - no height:
                - w/ height: <div class="lubh-bar" style="height:3px"></div>
            """
            if bb_soup.has_attr('style'):
                mm = re.search('height:([ 0-9]+)px', bb_soup['style'])
                if mm:
                    bar_height = int(mm.group(1).strip())
            """
            A typical line for bar times:
                - no time: <div class="_tpj"></div>
                - w/ time: <div class="_ipj">3p</div>
            """
            bar_time = ''
            mm = tt_soup.find('div', {'class': '_ipj'})
            if mm:
                bar_time = mm.text
            ##Save the extracted data
            histograms[day].append((bar_time, bar_height))
    return histograms

def get_duration(html):
    """
    Params:
        browser: a browser instance generated by from selenium
    """
    duration = ""

    ##Parse with BeautifulSoup
    # html = browser.page_source
    soup = BeautifulSoup(html, 'lxml')

    ##check if the sidebar exists
    if not soup.find_all('div', {'class': 'xpdopen'}):
        return None
    sidebar_soup = soup.find_all('div', {'class': 'xpdopen'})[0]

    ##check if "Plan your visit" exists
    if not (sidebar_soup.find(text="Plan your visit") or sidebar_soup.find(text="Plan your visit: ")):
        return None

    ##We should have the duration now
    duration_soup = sidebar_soup.find('div', {'class': '_B1k'})
    if duration_soup:
        duration = duration_soup.text
        if duration.find(':') > 0:
            duration = duration.split(':')[1].strip()

    return duration

if __name__=="__main__":
    with open("../../output/popular_times_duration_full.json") as json_file:
        json_data = json.load(json_file)
        # print(json_data)
    for item in json_data:
        print item['id']
        duration = get_duration(item['html'])
        print duration

    # url = get_url('Garwood Lanes, 346 North Ave, Garwood, NJ')
    # print url